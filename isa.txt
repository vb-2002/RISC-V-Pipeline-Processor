add
----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |00000|00   |rs2  |rs1  |000  |rd   |01100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | add        rd,rs1,rs2

:Description:
  | Adds the registers rs1 and rs2 and stores the result in rd.
  | Arithmetic overflow is ignored and the result is simply the low XLEN bits of the result.

:Implementation:
  | x[rd] = x[rs1] + x[rs2]

sub
----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |01000|00   |rs2  |rs1  |000  |rd   |01100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | sub        rd,rs1,rs2

:Description:
  | Subs the register rs2 from rs1 and stores the result in rd.
  | Arithmetic overflow is ignored and the result is simply the low XLEN bits of the result.

:Implementation:
  | x[rd] = x[rs1] - x[rs2]

addi
----

add immediate

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |imm[11:0]        |rs1  |000  |rd   |00100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | addi       rd,rs1,imm

:Description:
  | Adds the sign-extended 12-bit immediate to register rs1. Arithmetic overflow is ignored and the result is simply the low XLEN bits of the result. ADDI rd, rs1, 0 is used to implement the MV rd, rs1 assembler pseudo-instruction.

:Implementation:
  | x[rd] = x[rs1] + sext(immediate)

add
----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |00000|00   |rs2  |rs1  |000  |rd   |01100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | add        rd,rs1,rs2

:Description:
  | Adds the registers rs1 and rs2 and stores the result in rd.
  | Arithmetic overflow is ignored and the result is simply the low XLEN bits of the result.

:Implementation:
  | x[rd] = x[rs1] + x[rs2]

or
---

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |00000|00   |rs2  |rs1  |110  |rd   |01100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | or         rd,rs1,rs2

:Description:
  | Performs bitwise OR on registers rs1 and rs2 and place the result in rd

:Implementation:
  | x[rd] = x[rs1] | x[rs2]

xor
----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |00000|00   |rs2  |rs1  |100  |rd   |01100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | xor        rd,rs1,rs2

:Description:
  | Performs bitwise XOR on registers rs1 and rs2 and place the result in rd

:Implementation:
  | x[rd] = x[rs1] ^ x[rs2]

andi
-----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |imm[11:0]        |rs1  |111  |rd   |00100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | andi       rd,rs1,imm

:Description:
  | Performs bitwise AND on register rs1 and the sign-extended 12-bit immediate and place the result in rd

:Implementation:
  | x[rd] = x[rs1] & sext(immediate)

ori
----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |imm[11:0]        |rs1  |110  |rd   |00100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | ori        rd,rs1,imm

:Description:
  | Performs bitwise OR on register rs1 and the sign-extended 12-bit immediate and place the result in rd

:Implementation:
  | x[rd] = x[rs1] | sext(immediate)

xori
-----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |imm[11:0]        |rs1  |100  |rd   |00100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | xori       rd,rs1,imm

:Description:
  | Performs bitwise XOR on register rs1 and the sign-extended 12-bit immediate and place the result in rd
  | Note, "XORI rd, rs1, -1" performs a bitwise logical inversion of register rs1(assembler pseudo-instruction NOT rd, rs)

:Implementation:
  | x[rd] = x[rs1] ^ sext(immediate)

sll
----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |00000|00   |rs2  |rs1  |001  |rd   |01100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | sll        rd,rs1,rs2

:Description:
  | Performs logical left shift on the value in register rs1 by the shift amount held in the lower 5 bits of register rs2.

:Implementation:
  | x[rd] = x[rs1] << x[rs2]

srl
----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |00000|00   |rs2  |rs1  |101  |rd   |01100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | srl        rd,rs1,rs2

:Description:
  | Logical right shift on the value in register rs1 by the shift amount held in the lower 5 bits of register rs2

:Implementation:
  | x[rd] = x[rs1] >>u x[rs2]

slli
-----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |00000|0X   |shamt|rs1  |001  |rd   |00100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | slli       rd,rs1,shamt

:Description:
  | Performs logical left shift on the value in register rs1 by the shift amount held in the lower 5 bits of the immediate
  | In RV64, bit-25 is used to shamt[5].

:Implementation:
  | x[rd] = x[rs1] << shamt

srli
-----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |00000|0X   |shamt|rs1  |101  |rd   |00100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | srli       rd,rs1,shamt

:Description:
  | Performs logical right shift on the value in register rs1 by the shift amount held in the lower 5 bits of the immediate
  | In RV64, bit-25 is used to shamt[5].

:Implementation:
  | x[rd] = x[rs1] >>u shamt

sra
----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |01000|00   |rs2  |rs1  |101  |rd   |01100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | sra        rd,rs1,rs2

:Description:
  | Performs arithmetic right shift on the value in register rs1 by the shift amount held in the lower 5 bits of register rs2

:Implementation:
  | x[rd] = x[rs1] >>s x[rs2]

sra
----

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |01000|00   |rs2  |rs1  |101  |rd   |01100|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | sra        rd,rs1,rs2

:Description:
  | Performs arithmetic right shift on the value in register rs1 by the shift amount held in the lower 5 bits of register rs2

:Implementation:
  | x[rd] = x[rs1] >>s x[rs2]

lw
---

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+-----+-----+-----+-----+-----+-----+---+
  |31-27|26-25|24-20|19-15|14-12|11-7 |6-2  |1-0|
  +-----+-----+-----+-----+-----+-----+-----+---+
  |offset[11:0]     |rs1  |010  |rd   |00000|11 |
  +-----+-----+-----+-----+-----+-----+-----+---+



:Format:
  | lw         rd,offset(rs1)

:Description:
  | Loads a 32-bit value from memory and sign-extends this to XLEN bits before storing it in register rd.

:Implementation:
  | x[rd] = sext(M[x[rs1] + sext(offset)][31:0])

sw
---

.. tabularcolumns:: |c|c|c|c|c|c|c|c|
.. table::

  +-----+------+-----+-----+-----+-----------+-----+---+
  |31-27|26-25 |24-20|19-15|14-12|11-7       |6-2  |1-0|
  +-----+------+-----+-----+-----+-----------+-----+---+
  |offset[11:5]|rs2  |rs1  |010  |offset[4:0]|01000|11 |
  +-----+------+-----+-----+-----+-----------+-----+---+



:Format:
  | sw         rs2,offset(rs1)

:Description:
  | Store 32-bit, values from the low bits of register rs2 to memory.

:Implementation:
  | M[x[rs1] + sext(offset)] = x[rs2][31:0]

