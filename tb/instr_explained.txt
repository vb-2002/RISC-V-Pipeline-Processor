ADDI x5, x0, 0      ; x5 = 0
ADDI x6, x0, 1      ; x6 = 1
ADDI x7, x0, 2      ; x7 = 2
ADDI x8, x0, 3      ; x8 = 3
ADDI x9, x0, 4      ; x9 = 4
ADDI x10, x0, 5     ; x10 = 5
SUB x0, x5, x6      ; x0 = x5 - x6 (check SUB op)
XOR x7, x5, x14     ; test XOR and forwarding
AND x8, x5, x15     ; test AND
SW x6, 0(x5)        ; store to memory
LW x6, 0(x5)        ; load back
SW x6, 0(x5)        ; repeat store
BEQ x6, x5, skip    ; test taken branch
ADDI x6, x0, 1      ; should be skipped
ADDI x6, x0, 2      ; should be skipped
SW x7, 0(x5)        ; dummy
LW x6, 0(x5)        ; read back
SW x7, 8(x5)        ; write to new addr
LW x0, 8(x5)        ; load to x0 (legal)
LW x15, 0(x5)       ; load to x15
SW x15, 0(x5)       ; store x15 again
BEQ x7, x5, skip    ; branch not taken
LW x6, 8(x5)        ; should happen
BEQ x7, x5, skip    ; not taken
ADDI x6, x5, 1      ; testing forwarding
SUB x0, x5, x14     ; another SUB
SW x6, 0(x5)        ; again
LW x15, 0(x5)       ; load to x15
AND x8, x5, x15     ; AND logic
XOR x7, x5, x14     ; XOR logic
BEQ x6, x5, +4      ; should not take
BNE x6, x7, +8      ; should take

